{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sabrinastevens/Documents/Ecommerce-III/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sabrinastevens/Documents/Ecommerce-III/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/sabrinastevens/Documents/Ecommerce-III/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/sabrinastevens/Documents/Ecommerce-III/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/sabrinastevens/Documents/Ecommerce-III/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useCallback, useEffect, createContext, useContext, useMemo, createElement } from 'react';\n\nvar isCheckBoxInput = function isCheckBoxInput(type) {\n  return type === 'checkbox';\n};\n\nfunction attachEventListeners(_ref) {\n  var field = _ref.field,\n      validateAndStateUpdate = _ref.validateAndStateUpdate,\n      isRadio = _ref.isRadio,\n      isOnBlur = _ref.isOnBlur;\n  var ref = field.ref;\n  if (!ref.addEventListener) return;\n  ref.addEventListener(isCheckBoxInput(ref.type) || isRadio ? 'change' : 'input', validateAndStateUpdate);\n  if (isOnBlur) ref.addEventListener('blur', validateAndStateUpdate);\n}\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value === null || isUndefined(value);\n};\n\nvar isArray = function isArray(value) {\n  return Array.isArray(value);\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !isArray(value) && typeof value === 'object';\n};\n\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp = /^\\w*$/;\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g;\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\nfunction isIndex(value) {\n  return reIsUint.test(value) && value > -1;\n}\n\nfunction isKey(value) {\n  if (isArray(value)) return false;\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value);\n}\n\nvar stringToPath = function stringToPath(string) {\n  var result = [];\n  string.replace(rePropName, function (match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : isIndex(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar combineFieldValues = function combineFieldValues(data) {\n  return Object.entries(data).reduce(function (previous, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    if (!!key.match(/\\[.+\\]/gi) || key.indexOf('.') > 0) {\n      set(previous, key, value);\n      return previous;\n    }\n\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value));\n  }, {});\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (!ref.removeEventListener) return;\n  ref.removeEventListener('input', validateWithStateUpdate);\n  ref.removeEventListener('change', validateWithStateUpdate);\n  ref.removeEventListener('blur', validateWithStateUpdate);\n};\n\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nvar RADIO_INPUT = 'radio';\n\nvar isRadioInput = function isRadioInput(type) {\n  return type === RADIO_INPUT;\n};\n\nfunction isDetached(element) {\n  if (!element) return true;\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) return false;\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields) {\n  var validateWithStateUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n  var field = arguments.length > 2 ? arguments[2] : undefined;\n  var forceDelete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (!field) return;\n  var ref = field.ref,\n      mutationWatcher = field.mutationWatcher,\n      options = field.options;\n  if (!ref || !ref.type) return;\n  var name = ref.name,\n      type = ref.type;\n\n  if (isRadioInput(type) && options) {\n    options.forEach(function (_ref4, index) {\n      var ref = _ref4.ref;\n\n      if (options[index] && isDetached(ref) || forceDelete) {\n        removeAllEventListeners(options[index], validateWithStateUpdate);\n        (options[index].mutationWatcher || {\n          disconnect: function disconnect() {}\n        }).disconnect();\n        options.splice(index, 1);\n      }\n    });\n    if (!options.length) delete fields[name];\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, validateWithStateUpdate);\n    if (mutationWatcher) mutationWatcher.disconnect();\n    delete fields[name];\n  }\n}\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return isArray(options) ? options.reduce(function (previous, _ref5) {\n    var _ref5$ref = _ref5.ref,\n        checked = _ref5$ref.checked,\n        value = _ref5$ref.value;\n    return checked ? {\n      isValid: true,\n      value: value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref6) {\n    var selected = _ref6.selected;\n    return selected;\n  }).map(function (_ref7) {\n    var value = _ref7.value;\n    return value;\n  });\n};\n\nvar isMultipleSelect = function isMultipleSelect(type) {\n  return type === 'select-multiple';\n};\n\nfunction getFieldValue(fields, ref) {\n  var type = ref.type,\n      name = ref.name,\n      options = ref.options,\n      checked = ref.checked,\n      value = ref.value,\n      files = ref.files;\n\n  if (type === 'file') {\n    return files;\n  }\n\n  if (isRadioInput(type)) {\n    var field = fields[name];\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(type)) return getMultipleSelectValue(options);\n\n  if (isCheckBoxInput(type)) {\n    if (checked) {\n      return ref.attributes && ref.attributes.value ? isUndefined(value) || value === '' ? true : value : true;\n    }\n\n    return false;\n  }\n\n  return value;\n}\n\nvar getFieldsValues = function getFieldsValues(fields) {\n  return Object.values(fields).reduce(function (previous, _ref8) {\n    var ref = _ref8.ref,\n        name = _ref8.ref.name;\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, name, getFieldValue(fields, ref)));\n  }, {});\n};\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && Object.keys(value).length === 0;\n};\n\nvar isSameError = function isSameError(error, type, message) {\n  return isObject(error) && error.type === type && error.message === message;\n}; // Todo: improve the types in this file\n\n\nfunction shouldUpdateWithError(_ref9) {\n  var errors = _ref9.errors,\n      name = _ref9.name,\n      error = _ref9.error,\n      validFields = _ref9.validFields,\n      fieldsWithValidation = _ref9.fieldsWithValidation;\n\n  if (validFields.has(name) && isEmptyObject(error) || errors[name] && errors[name].isManual) {\n    return false;\n  }\n\n  if (fieldsWithValidation.has(name) && !validFields.has(name) && isEmptyObject(error) || isEmptyObject(errors) && !isEmptyObject(error) || isEmptyObject(error) && errors[name] || !errors[name]) {\n    return true;\n  }\n\n  return errors[name] && error[name] && !isSameError(errors[name], error[name].type, error[name].message);\n}\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return {\n    value: isObject(validationData) && !isRegex(validationData) ? validationData.value : validationData,\n    message: isObject(validationData) && !isRegex(validationData) ? validationData.message : ''\n  };\n};\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar displayNativeError = function displayNativeError(nativeValidation, ref, message) {\n  if (nativeValidation && isString(message)) ref.setCustomValidity(message);\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nfunction getValidateFunctionErrorObject(result, ref, nativeError) {\n  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'validate';\n  var isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    var message = isStringValue ? result : '';\n    var error = {\n      type: type,\n      message: message,\n      ref: ref\n    };\n    nativeError(message);\n    return error;\n  }\n\n  return;\n}\n\nvar validateField =\n/*#__PURE__*/\nfunction () {\n  var _ref11 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(_ref10, fields, nativeValidation) {\n    var ref, _ref10$ref, type, value, name, checked, options, required, maxLength, minLength, min, max, pattern, validate, error, isRadio, isCheckBox, nativeError, exceedMax, exceedMin, _getValueAndMessage, maxValue, maxMessage, _getValueAndMessage2, minValue, minMessage, valueNumber, message, _getValueAndMessage3, maxLengthValue, maxLengthMessage, _getValueAndMessage4, minLengthValue, minLengthMessage, inputLength, _exceedMax, _exceedMin, _message, _getValueAndMessage5, patternValue, patternMessage, fieldValue, validateRef, result, errorObject, validationResult;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ref = _ref10.ref, _ref10$ref = _ref10.ref, type = _ref10$ref.type, value = _ref10$ref.value, name = _ref10$ref.name, checked = _ref10$ref.checked, options = _ref10.options, required = _ref10.required, maxLength = _ref10.maxLength, minLength = _ref10.minLength, min = _ref10.min, max = _ref10.max, pattern = _ref10.pattern, validate = _ref10.validate;\n            error = {};\n            isRadio = isRadioInput(type);\n            isCheckBox = isCheckBoxInput(type);\n            nativeError = displayNativeError.bind(null, nativeValidation, ref);\n\n            if (!(required && (isCheckBox && !checked || !isCheckBox && !isRadio && value === '' || isRadio && !getRadioValue(fields[name].options).isValid || !type && isNullOrUndefined(value)))) {\n              _context2.next = 9;\n              break;\n            }\n\n            error[name] = {\n              type: 'required',\n              message: isString(required) ? required : '',\n              ref: isRadio ? fields[name].options[0].ref : ref\n            };\n            nativeError(required);\n            return _context2.abrupt(\"return\", error);\n\n          case 9:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context2.next = 18;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(max), maxValue = _getValueAndMessage.value, maxMessage = _getValueAndMessage.message;\n            _getValueAndMessage2 = getValueAndMessage(min), minValue = _getValueAndMessage2.value, minMessage = _getValueAndMessage2.message;\n\n            if (type === 'number') {\n              valueNumber = parseFloat(value);\n              if (!isNullOrUndefined(maxValue)) exceedMax = valueNumber > maxValue;\n              if (!isNullOrUndefined(minValue)) exceedMin = valueNumber < minValue;\n            } else {\n              if (isString(maxValue)) exceedMax = new Date(value) > new Date(maxValue);\n              if (isString(minValue)) exceedMin = new Date(value) < new Date(minValue);\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context2.next = 18;\n              break;\n            }\n\n            message = exceedMax ? maxMessage : minMessage;\n            error[name] = {\n              type: exceedMax ? 'max' : 'min',\n              message: message,\n              ref: ref\n            };\n            nativeError(message);\n            return _context2.abrupt(\"return\", error);\n\n          case 18:\n            if (!((maxLength || minLength) && isString(value))) {\n              _context2.next = 29;\n              break;\n            }\n\n            _getValueAndMessage3 = getValueAndMessage(maxLength), maxLengthValue = _getValueAndMessage3.value, maxLengthMessage = _getValueAndMessage3.message;\n            _getValueAndMessage4 = getValueAndMessage(minLength), minLengthValue = _getValueAndMessage4.value, minLengthMessage = _getValueAndMessage4.message;\n            inputLength = value.toString().length;\n            _exceedMax = maxLength && inputLength > maxLengthValue;\n            _exceedMin = minLength && inputLength < minLengthValue;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context2.next = 29;\n              break;\n            }\n\n            _message = _exceedMax ? maxLengthMessage : minLengthMessage;\n            error[name] = {\n              type: _exceedMax ? 'maxLength' : 'minLength',\n              message: _message,\n              ref: ref\n            };\n            nativeError(_message);\n            return _context2.abrupt(\"return\", error);\n\n          case 29:\n            if (!pattern) {\n              _context2.next = 35;\n              break;\n            }\n\n            _getValueAndMessage5 = getValueAndMessage(pattern), patternValue = _getValueAndMessage5.value, patternMessage = _getValueAndMessage5.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context2.next = 35;\n              break;\n            }\n\n            error[name] = {\n              type: 'pattern',\n              message: patternMessage,\n              ref: ref\n            };\n            nativeError(patternMessage);\n            return _context2.abrupt(\"return\", error);\n\n          case 35:\n            if (!validate) {\n              _context2.next = 55;\n              break;\n            }\n\n            fieldValue = getFieldValue(fields, ref);\n            validateRef = isRadio && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context2.next = 48;\n              break;\n            }\n\n            _context2.next = 41;\n            return validate(fieldValue);\n\n          case 41:\n            result = _context2.sent;\n            errorObject = getValidateFunctionErrorObject(result, validateRef, nativeError);\n\n            if (!errorObject) {\n              _context2.next = 46;\n              break;\n            }\n\n            error[name] = errorObject;\n            return _context2.abrupt(\"return\", error);\n\n          case 46:\n            _context2.next = 55;\n            break;\n\n          case 48:\n            if (!isObject(validate)) {\n              _context2.next = 55;\n              break;\n            }\n\n            _context2.next = 51;\n            return new Promise(function (resolve) {\n              var values = Object.entries(validate);\n              values.reduce(\n              /*#__PURE__*/\n              function () {\n                var _ref13 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(previous, _ref12, index) {\n                  var _ref14, key, validate, lastChild, _result, _errorObject;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _ref14 = _slicedToArray(_ref12, 2), key = _ref14[0], validate = _ref14[1];\n                          lastChild = values.length - 1 === index;\n\n                          if (!isFunction(validate)) {\n                            _context.next = 9;\n                            break;\n                          }\n\n                          _context.next = 5;\n                          return validate(fieldValue);\n\n                        case 5:\n                          _result = _context.sent;\n                          _errorObject = getValidateFunctionErrorObject(_result, validateRef, nativeError, key);\n\n                          if (!_errorObject) {\n                            _context.next = 9;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", lastChild ? resolve(_errorObject) : _errorObject);\n\n                        case 9:\n                          return _context.abrupt(\"return\", lastChild ? resolve(previous) : previous);\n\n                        case 10:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x4, _x5, _x6) {\n                  return _ref13.apply(this, arguments);\n                };\n              }(), {});\n            });\n\n          case 51:\n            validationResult = _context2.sent;\n\n            if (isEmptyObject(validationResult)) {\n              _context2.next = 55;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n            return _context2.abrupt(\"return\", error);\n\n          case 55:\n            if (nativeValidation) ref.setCustomValidity('');\n            return _context2.abrupt(\"return\", error);\n\n          case 57:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function validateField(_x, _x2, _x3) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\nvar parseErrorSchema = function parseErrorSchema(error) {\n  return error.inner.length ? error.inner.reduce(function (previous, _ref15) {\n    var path = _ref15.path,\n        message = _ref15.message,\n        type = _ref15.type;\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, path, {\n      message: message,\n      ref: {},\n      type: type\n    }));\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    ref: {},\n    type: error.type\n  });\n};\n\nfunction validateWithSchema(_x7, _x8, _x9) {\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction _validateWithSchema() {\n  _validateWithSchema = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee10(validationSchema, validationSchemaOption, data) {\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return validationSchema.validate(data, validationSchemaOption);\n\n          case 3:\n            _context10.t0 = _context10.sent;\n            _context10.t1 = {};\n            return _context10.abrupt(\"return\", {\n              result: _context10.t0,\n              fieldErrors: _context10.t1\n            });\n\n          case 8:\n            _context10.prev = 8;\n            _context10.t2 = _context10[\"catch\"](0);\n            return _context10.abrupt(\"return\", {\n              result: {},\n              fieldErrors: parseErrorSchema(_context10.t2)\n            });\n\n          case 11:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[0, 8]]);\n  }));\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction attachNativeValidation(ref, rules) {\n  Object.entries(rules).forEach(function (_ref17) {\n    var _ref18 = _slicedToArray(_ref17, 2),\n        key = _ref18[0],\n        value = _ref18[1];\n\n    if (key === 'pattern' && isRegex(value)) {\n      ref[key] = value.source;\n    } else {\n      ref[key] = key === 'required' ? true : value;\n    }\n  });\n}\n\nvar get = function get(obj, path, defaultValue) {\n  var result = String.prototype.split.call(path, /[,[\\].]+?/).filter(Boolean).reduce(function (res, key) {\n    return res !== null && res !== undefined ? res[key] : res;\n  }, obj);\n  return result === undefined || result === obj ? defaultValue : result;\n};\n\nvar getDefaultValue = function getDefaultValue(defaultValues, name, defaultValue) {\n  return isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n};\n\nfunction flatArray(list) {\n  return list.reduce(function (a, b) {\n    return a.concat(isArray(b) ? flatArray(b) : b);\n  }, []);\n}\n\nvar getPath = function getPath(path, values) {\n  return isArray(values) ? values.map(function (item, index) {\n    var pathWithIndex = \"\".concat(path, \"[\").concat(index, \"]\");\n\n    if (isArray(item)) {\n      return getPath(pathWithIndex, item);\n    } else if (isObject(item)) {\n      return Object.entries(item).map(function (_ref19) {\n        var _ref20 = _slicedToArray(_ref19, 2),\n            key = _ref20[0],\n            objectValue = _ref20[1];\n\n        return isString(objectValue) ? \"\".concat(pathWithIndex, \".\").concat(key) : getPath(\"\".concat(pathWithIndex, \".\").concat(key), objectValue);\n      });\n    }\n\n    return pathWithIndex;\n  }) : Object.entries(values).map(function (_ref21) {\n    var _ref22 = _slicedToArray(_ref21, 2),\n        key = _ref22[0],\n        objectValue = _ref22[1];\n\n    return isString(objectValue) ? \"\".concat(path, \".\").concat(key) : getPath(path, objectValue);\n  });\n};\n\nvar getPath$1 = function getPath$1(parentPath, value) {\n  return flatArray(getPath(parentPath, value));\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields) {\n  if (isNullOrUndefined(fieldValues) || isEmptyObject(fieldValues)) return undefined;\n\n  if (!isUndefined(fieldValues[fieldName])) {\n    watchFields[fieldName] = true;\n    return fieldValues[fieldName];\n  }\n\n  var values = get(combineFieldValues(fieldValues), fieldName);\n\n  if (!isUndefined(values)) {\n    var result = getPath$1(fieldName, values);\n\n    if (isArray(result)) {\n      result.forEach(function (name) {\n        watchFields[name] = true;\n      });\n    }\n  }\n\n  return values;\n};\n\nvar omitValidFields = function omitValidFields(errorFields, validFieldNames) {\n  return Object.entries(errorFields).reduce(function (previous, _ref23) {\n    var _ref24 = _slicedToArray(_ref23, 2),\n        name = _ref24[0],\n        error = _ref24[1];\n\n    return validFieldNames.some(function (validFieldName) {\n      return validFieldName === name;\n    }) ? previous : Object.assign(Object.assign({}, previous), _defineProperty({}, name, error));\n  }, {});\n};\n\nfunction onDomRemove(element, onDetachCallback) {\n  var observer = new MutationObserver(function () {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange\n  };\n};\n\nvar pickErrors = function pickErrors(errors, pickList) {\n  return Object.entries(errors).reduce(function (previous, _ref25) {\n    var _ref26 = _slicedToArray(_ref25, 2),\n        key = _ref26[0],\n        error = _ref26[1];\n\n    return Object.assign(Object.assign({}, previous), pickList.includes(key) ? _defineProperty({}, key, error) : null);\n  }, {});\n};\n\nfunction useForm() {\n  var _ref28 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref28$mode = _ref28.mode,\n      mode = _ref28$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref28$mode,\n      validationSchema = _ref28.validationSchema,\n      _ref28$defaultValues = _ref28.defaultValues,\n      defaultValues = _ref28$defaultValues === void 0 ? {} : _ref28$defaultValues,\n      validationFields = _ref28.validationFields,\n      nativeValidation = _ref28.nativeValidation,\n      _ref28$submitFocusErr = _ref28.submitFocusError,\n      submitFocusError = _ref28$submitFocusErr === void 0 ? true : _ref28$submitFocusErr,\n      _ref28$validationSche = _ref28.validationSchemaOption,\n      validationSchemaOption = _ref28$validationSche === void 0 ? {\n    abortEarly: false\n  } : _ref28$validationSche;\n\n  var fieldsRef = useRef({});\n  var errorsRef = useRef({});\n  var schemaErrorsRef = useRef({});\n  var touchedFieldsRef = useRef(new Set());\n  var watchFieldsRef = useRef({});\n  var dirtyFieldsRef = useRef(new Set());\n  var fieldsWithValidationRef = useRef(new Set());\n  var validFieldsRef = useRef(new Set());\n  var defaultValuesRef = useRef({});\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var isSubmittedRef = useRef(false);\n  var isDirtyRef = useRef(false);\n  var submitCountRef = useRef(0);\n  var isSubmittingRef = useRef(false);\n  var isSchemaValidateTriggeredRef = useRef(false);\n  var validationFieldsRef = useRef(validationFields);\n  var validateAndUpdateStateRef = useRef();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      render = _useState2[1];\n\n  var _useRef$current = useRef(modeChecker(mode)).current,\n      isOnBlur = _useRef$current.isOnBlur,\n      isOnSubmit = _useRef$current.isOnSubmit;\n  var validationSchemaOptionRef = useRef(validationSchemaOption);\n  validationFieldsRef.current = validationFields;\n\n  var combineErrorsRef = function combineErrorsRef(data) {\n    return Object.assign(Object.assign({}, errorsRef.current), data);\n  };\n\n  var renderBaseOnError = useCallback(function (name, error) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (isEmptyObject(error)) {\n      delete errorsRef.current[name];\n      if (fieldsWithValidationRef.current.has(name) || validationSchema) validFieldsRef.current.add(name);\n    } else {\n      validFieldsRef.current.delete(name);\n    }\n\n    if (shouldRender) render({});\n  }, [validationSchema]);\n\n  var setFieldValue = function setFieldValue(name, rawValue) {\n    var field = fieldsRef.current[name];\n    if (!field) return false;\n    var ref = field.ref;\n    var type = ref.type;\n    var options = field.options;\n    var value = ref instanceof HTMLElement && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(type) && options) {\n      options.forEach(function (_ref29) {\n        var radioRef = _ref29.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isMultipleSelect(type)) {\n      _toConsumableArray(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else {\n      ref[isCheckBoxInput(type) ? 'checked' : 'value'] = value;\n    }\n\n    return type;\n  };\n\n  var setDirty = function setDirty(name) {\n    if (!fieldsRef.current[name]) return false;\n    var isDirty = defaultValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n    var isDirtyChanged = dirtyFieldsRef.current.has(name) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = !!dirtyFieldsRef.current.size;\n    return isDirtyChanged;\n  };\n\n  var setValueInternal = useCallback(function (name, value) {\n    var shouldRender = setFieldValue(name, value);\n\n    if (setDirty(name) || shouldRender || !touchedFieldsRef.current.has(name)) {\n      touchedFieldsRef.current.add(name);\n      render({});\n    }\n  }, []);\n  var executeValidation = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref31 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(_ref30) {\n      var name,\n          value,\n          shouldRender,\n          field,\n          error,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              name = _ref30.name, value = _ref30.value;\n              shouldRender = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : true;\n              field = fieldsRef.current[name];\n\n              if (field) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", false);\n\n            case 5:\n              if (!isUndefined(value)) setValueInternal(name, value);\n              _context3.next = 8;\n              return validateField(field, fieldsRef.current);\n\n            case 8:\n              error = _context3.sent;\n              errorsRef.current = combineErrorsRef(error);\n              renderBaseOnError(name, error, shouldRender);\n              return _context3.abrupt(\"return\", isEmptyObject(error));\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x10) {\n      return _ref31.apply(this, arguments);\n    };\n  }(), [renderBaseOnError, setValueInternal]);\n  var validateWithSchemaCurry = useCallback(validateWithSchema.bind(null, validationSchema, validationSchemaOptionRef.current), [validationSchema]);\n  var executeSchemaValidation = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref32 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(payload) {\n      var _ref33, fieldErrors, names, validFieldNames;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return validateWithSchemaCurry(combineFieldValues(getFieldsValues(fieldsRef.current)));\n\n            case 2:\n              _ref33 = _context4.sent;\n              fieldErrors = _ref33.fieldErrors;\n              names = isArray(payload) ? payload.map(function (_ref34) {\n                var name = _ref34.name;\n                return name;\n              }) : [payload.name];\n              validFieldNames = names.filter(function (name) {\n                return !fieldErrors[name];\n              });\n              schemaErrorsRef.current = fieldErrors;\n              isSchemaValidateTriggeredRef.current = true;\n              errorsRef.current = omitValidFields(combineErrorsRef(Object.entries(fieldErrors).filter(function (_ref35) {\n                var _ref36 = _slicedToArray(_ref35, 1),\n                    key = _ref36[0];\n\n                return names.includes(key);\n              }).reduce(function (previous, _ref37) {\n                var _ref38 = _slicedToArray(_ref37, 2),\n                    name = _ref38[0],\n                    error = _ref38[1];\n\n                return Object.assign(Object.assign({}, previous), _defineProperty({}, name, error));\n              }, {})), validFieldNames);\n              render({});\n              return _context4.abrupt(\"return\", isEmptyObject(errorsRef.current));\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x11) {\n      return _ref32.apply(this, arguments);\n    };\n  }(), [validateWithSchemaCurry]);\n  var triggerValidation = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref39 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(payload, shouldRender) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              fields = payload || Object.keys(fieldsRef.current).map(function (name) {\n                return {\n                  name: name\n                };\n              });\n\n              if (!validationSchema) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", executeSchemaValidation(fields));\n\n            case 3:\n              if (!isArray(fields)) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 6;\n              return Promise.all(fields.map(\n              /*#__PURE__*/\n              function () {\n                var _ref40 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee5(data) {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return executeValidation(data, false);\n\n                        case 2:\n                          return _context5.abrupt(\"return\", _context5.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x14) {\n                  return _ref40.apply(this, arguments);\n                };\n              }()));\n\n            case 6:\n              result = _context6.sent;\n              render({});\n              return _context6.abrupt(\"return\", result.every(Boolean));\n\n            case 9:\n              _context6.next = 11;\n              return executeValidation(fields, shouldRender);\n\n            case 11:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x12, _x13) {\n      return _ref39.apply(this, arguments);\n    };\n  }(), [executeSchemaValidation, executeValidation, validationSchema]);\n  var setValue = useCallback(function (name, value) {\n    var shouldValidate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    setValueInternal(name, value);\n    var shouldRender = isWatchAllRef.current || watchFieldsRef.current[name];\n\n    if (shouldValidate) {\n      return triggerValidation({\n        name: name\n      }, shouldRender);\n    }\n\n    if (shouldRender) render({});\n  }, [setValueInternal, triggerValidation]);\n  validateAndUpdateStateRef.current = validateAndUpdateStateRef.current ? validateAndUpdateStateRef.current :\n  /*#__PURE__*/\n  function () {\n    var _ref42 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(_ref41) {\n      var name, type, fields, errors, ref, error, isBlurEvent, isValidateDisabled, shouldUpdateState, _ref43, fieldErrors, shouldUpdate;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              name = _ref41.target.name, type = _ref41.type;\n\n              if (!(isArray(validationFieldsRef.current) && !validationFieldsRef.current.includes(name))) {\n                _context7.next = 3;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 3:\n              fields = fieldsRef.current;\n              errors = errorsRef.current;\n              ref = fields[name];\n\n              if (ref) {\n                _context7.next = 8;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 8:\n              isBlurEvent = type === 'blur';\n              isValidateDisabled = isOnSubmit && !isSubmittedRef.current || isOnBlur && !isBlurEvent && !errors[name];\n              shouldUpdateState = isWatchAllRef.current || watchFieldsRef.current[name] || setDirty(name);\n\n              if (!touchedFieldsRef.current.has(name)) {\n                touchedFieldsRef.current.add(name);\n                shouldUpdateState = true;\n              }\n\n              if (!isValidateDisabled) {\n                _context7.next = 14;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", shouldUpdateState ? render({}) : undefined);\n\n            case 14:\n              if (!validationSchema) {\n                _context7.next = 24;\n                break;\n              }\n\n              _context7.next = 17;\n              return validateWithSchemaCurry(combineFieldValues(getFieldsValues(fields)));\n\n            case 17:\n              _ref43 = _context7.sent;\n              fieldErrors = _ref43.fieldErrors;\n              schemaErrorsRef.current = fieldErrors;\n              isSchemaValidateTriggeredRef.current = true;\n              error = fieldErrors[name] ? _defineProperty({}, name, fieldErrors[name]) : {};\n              _context7.next = 27;\n              break;\n\n            case 24:\n              _context7.next = 26;\n              return validateField(ref, fields, nativeValidation);\n\n            case 26:\n              error = _context7.sent;\n\n            case 27:\n              shouldUpdate = shouldUpdateWithError({\n                errors: errors,\n                error: error,\n                name: name,\n                validFields: validFieldsRef.current,\n                fieldsWithValidation: fieldsWithValidationRef.current\n              });\n\n              if (!shouldUpdate) {\n                _context7.next = 32;\n                break;\n              }\n\n              errorsRef.current = combineErrorsRef(error);\n              renderBaseOnError(name, error);\n              return _context7.abrupt(\"return\");\n\n            case 32:\n              if (shouldUpdateState) render({});\n\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x15) {\n      return _ref42.apply(this, arguments);\n    };\n  }();\n\n  var resetFieldRef = function resetFieldRef(name) {\n    delete watchFieldsRef.current[name];\n    delete errorsRef.current[name];\n    delete fieldsRef.current[name];\n    delete defaultValuesRef.current[name];\n    [touchedFieldsRef, dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef].forEach(function (data) {\n      return data.current.delete(name);\n    });\n  };\n\n  var removeEventListenerAndRef = useCallback(function (field, forceDelete) {\n    if (!field) return;\n    findRemovedFieldAndRemoveListener(fieldsRef.current, validateAndUpdateStateRef.current, field, forceDelete);\n    resetFieldRef(field.ref.name);\n  }, []);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      (isArray(name) ? name : [name]).forEach(function (fieldName) {\n        return delete errorsRef.current[fieldName];\n      });\n    }\n\n    render({});\n  }\n\n  var setError = function setError(name, type, message, ref) {\n    var errors = errorsRef.current;\n\n    if (!isSameError(errors[name], type, message)) {\n      errors[name] = {\n        type: type,\n        message: message,\n        ref: ref,\n        isManual: true\n      };\n      render({});\n    }\n  };\n\n  function watch(fieldNames, defaultValue) {\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    var watchFields = watchFieldsRef.current;\n\n    if (isString(fieldNames)) {\n      var value = assignWatchFields(fieldValues, fieldNames, watchFields);\n      return isUndefined(value) ? isUndefined(defaultValue) ? getDefaultValue(defaultValues, fieldNames) : defaultValue : value;\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        var value = getDefaultValue(defaultValues, name);\n\n        if (isEmptyObject(fieldsRef.current) && isObject(defaultValue)) {\n          value = defaultValue[name];\n        } else {\n          var tempValue = assignWatchFields(fieldValues, name, watchFields);\n          if (!isUndefined(tempValue)) value = tempValue;\n        }\n\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, value));\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    return !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValues;\n  }\n\n  function registerIntoFieldsRef(ref) {\n    var validateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ref.name) return console.warn('Miss ref', ref);\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldAttributes = Object.assign({\n      ref: ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadio = isRadioInput(type);\n    var currentField = fields[name];\n    var isRegistered = isRadio ? currentField && isArray(currentField.options) && currentField.options.find(function (_ref45) {\n      var ref = _ref45.ref;\n      return value === ref.value;\n    }) : currentField;\n    if (isRegistered) return;\n\n    if (!type) {\n      fields[name] = fieldAttributes;\n    } else {\n      var mutationWatcher = onDomRemove(ref, function () {\n        return removeEventListenerAndRef(fieldAttributes);\n      });\n\n      if (isRadio) {\n        if (!currentField) fields[name] = {\n          options: [],\n          ref: {\n            type: RADIO_INPUT,\n            name: name\n          }\n        };\n        fields[name] = Object.assign(Object.assign({}, fields[name]), validateOptions);\n        fields[name].options.push({\n          ref: ref,\n          mutationWatcher: mutationWatcher\n        });\n      } else {\n        fields[name] = Object.assign(Object.assign({}, fieldAttributes), {\n          mutationWatcher: mutationWatcher\n        });\n      }\n    }\n\n    if (!isEmptyObject(defaultValues)) {\n      var defaultValue = getDefaultValue(defaultValues, name);\n      if (!isUndefined(defaultValue)) setFieldValue(name, defaultValue);\n    }\n\n    if (validateOptions && !isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit) {\n        if (validationSchema) {\n          isSchemaValidateTriggeredRef.current = true;\n          validateWithSchemaCurry(combineFieldValues(getFieldsValues(fields))).then(function (_ref46) {\n            var fieldErrors = _ref46.fieldErrors;\n            schemaErrorsRef.current = fieldErrors;\n            if (isEmptyObject(schemaErrorsRef.current)) render({});\n          });\n        } else {\n          validateField(fields[name], fields).then(function (error) {\n            if (isEmptyObject(error)) validFieldsRef.current.add(name);\n            if (validFieldsRef.current.size === fieldsWithValidationRef.current.size) render({});\n          });\n        }\n      }\n    }\n\n    if (!defaultValuesRef.current[name]) defaultValuesRef.current[name] = getFieldValue(fields, fields[name].ref);\n    if (!type) return;\n    var field = isRadio ? fields[name].options[fields[name].options.length - 1] : fields[name];\n\n    if (nativeValidation && validateOptions) {\n      attachNativeValidation(ref, validateOptions);\n    } else {\n      attachEventListeners({\n        field: field,\n        isRadio: isRadio,\n        validateAndStateUpdate: validateAndUpdateStateRef.current,\n        isOnBlur: isOnBlur\n      });\n    }\n  }\n\n  function register(refOrValidateRule, validationOptions) {\n    if (typeof window === 'undefined' || !refOrValidateRule) return;\n\n    if (isObject(refOrValidateRule) && (validationOptions || 'name' in refOrValidateRule)) {\n      registerIntoFieldsRef(refOrValidateRule, validationOptions);\n      return;\n    }\n\n    return function (ref) {\n      return ref && registerIntoFieldsRef(ref, refOrValidateRule);\n    };\n  }\n\n  function unregister(names) {\n    if (isEmptyObject(fieldsRef.current)) return;\n    (isArray(names) ? names : [names]).forEach(function (fieldName) {\n      return removeEventListenerAndRef(fieldsRef.current[fieldName], true);\n    });\n  }\n\n  var handleSubmit = function handleSubmit(callback) {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref47 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee9(e) {\n          var fieldErrors, fieldValues, firstFocusError, fields, fieldsToValidate, output, _ref48, errors, values;\n\n          return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  if (e) {\n                    e.preventDefault();\n                    e.persist();\n                  }\n\n                  firstFocusError = true;\n                  fields = fieldsRef.current;\n                  fieldsToValidate = validationFields ? validationFields.map(function (name) {\n                    return fieldsRef.current[name];\n                  }) : Object.values(fields);\n                  isSubmittingRef.current = true;\n                  render({});\n\n                  if (!validationSchema) {\n                    _context9.next = 16;\n                    break;\n                  }\n\n                  fieldValues = getFieldsValues(fields);\n                  _context9.next = 10;\n                  return validateWithSchema(validationSchema, validationSchemaOption, combineFieldValues(fieldValues));\n\n                case 10:\n                  output = _context9.sent;\n                  schemaErrorsRef.current = output.fieldErrors;\n                  fieldErrors = output.fieldErrors;\n                  fieldValues = output.result;\n                  _context9.next = 23;\n                  break;\n\n                case 16:\n                  _context9.next = 18;\n                  return fieldsToValidate.reduce(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref49 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee8(previous, field) {\n                      var resolvedPrevious, ref, _field$ref, name, focus, fieldError;\n\n                      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                        while (1) {\n                          switch (_context8.prev = _context8.next) {\n                            case 0:\n                              if (field) {\n                                _context8.next = 2;\n                                break;\n                              }\n\n                              return _context8.abrupt(\"return\", previous);\n\n                            case 2:\n                              _context8.next = 4;\n                              return previous;\n\n                            case 4:\n                              resolvedPrevious = _context8.sent;\n                              ref = field.ref, _field$ref = field.ref, name = _field$ref.name, focus = _field$ref.focus;\n\n                              if (fields[name]) {\n                                _context8.next = 8;\n                                break;\n                              }\n\n                              return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                            case 8:\n                              _context8.next = 10;\n                              return validateField(field, fields, nativeValidation);\n\n                            case 10:\n                              fieldError = _context8.sent;\n\n                              if (!fieldError[name]) {\n                                _context8.next = 16;\n                                break;\n                              }\n\n                              if (submitFocusError && firstFocusError && focus) {\n                                ref.focus();\n                                firstFocusError = false;\n                              }\n\n                              resolvedPrevious.errors = Object.assign(Object.assign({}, resolvedPrevious.errors), fieldError);\n                              validFieldsRef.current.delete(name);\n                              return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                            case 16:\n                              if (fieldsWithValidationRef.current.has(name)) validFieldsRef.current.add(name);\n                              resolvedPrevious.values[name] = getFieldValue(fields, ref);\n                              return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                            case 19:\n                            case \"end\":\n                              return _context8.stop();\n                          }\n                        }\n                      }, _callee8);\n                    }));\n\n                    return function (_x17, _x18) {\n                      return _ref49.apply(this, arguments);\n                    };\n                  }(), Promise.resolve({\n                    errors: {},\n                    values: {}\n                  }));\n\n                case 18:\n                  _ref48 = _context9.sent;\n                  errors = _ref48.errors;\n                  values = _ref48.values;\n                  fieldErrors = errors;\n                  fieldValues = values;\n\n                case 23:\n                  if (!isEmptyObject(fieldErrors)) {\n                    _context9.next = 29;\n                    break;\n                  }\n\n                  errorsRef.current = {};\n                  _context9.next = 27;\n                  return callback(combineFieldValues(fieldValues), e);\n\n                case 27:\n                  _context9.next = 30;\n                  break;\n\n                case 29:\n                  errorsRef.current = fieldErrors;\n\n                case 30:\n                  if (!isUnMount.current) {\n                    _context9.next = 32;\n                    break;\n                  }\n\n                  return _context9.abrupt(\"return\");\n\n                case 32:\n                  isSubmittedRef.current = true;\n                  isSubmittingRef.current = false;\n                  submitCountRef.current = submitCountRef.current + 1;\n                  render({});\n\n                case 36:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9);\n        }));\n\n        return function (_x16) {\n          return _ref47.apply(this, arguments);\n        };\n      }()\n    );\n  };\n\n  var resetRefs = function resetRefs() {\n    errorsRef.current = {};\n    schemaErrorsRef.current = {};\n    touchedFieldsRef.current = new Set();\n    watchFieldsRef.current = {};\n    dirtyFieldsRef.current = new Set();\n    fieldsWithValidationRef.current = new Set();\n    validFieldsRef.current = new Set();\n    defaultValuesRef.current = {};\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    isSchemaValidateTriggeredRef.current = false;\n  };\n\n  var reset = useCallback(function (values) {\n    var fieldsKeyValue = Object.entries(fieldsRef.current);\n\n    for (var _i = 0, _fieldsKeyValue = fieldsKeyValue; _i < _fieldsKeyValue.length; _i++) {\n      var _ref54 = _fieldsKeyValue[_i];\n\n      var _ref51 = _slicedToArray(_ref54, 2);\n\n      var value = _ref51[1];\n\n      if (value && value.ref && value.ref.closest) {\n        try {\n          value.ref.closest('form').reset();\n          break;\n        } catch (_a) {}\n      }\n    }\n\n    resetRefs();\n\n    if (values) {\n      fieldsKeyValue.forEach(function (_ref52) {\n        var _ref53 = _slicedToArray(_ref52, 1),\n            key = _ref53[0];\n\n        return setFieldValue(key, getDefaultValue(values, key));\n      });\n      defaultValuesRef.current = values;\n    }\n\n    submitCountRef.current = 0;\n    render({});\n  }, []);\n\n  var getValues = function getValues(payload) {\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    var output = payload && payload.nest ? combineFieldValues(fieldValues) : fieldValues;\n    return isEmptyObject(output) ? defaultValues : output;\n  };\n\n  useEffect(function () {\n    return function () {\n      isUnMount.current = true;\n      fieldsRef.current && Object.values(fieldsRef.current).forEach(function (field) {\n        return removeEventListenerAndRef(field, true);\n      });\n    };\n  }, [removeEventListenerAndRef]);\n  return {\n    register: useCallback(register, [registerIntoFieldsRef]),\n    unregister: useCallback(unregister, [unregister, removeEventListenerAndRef]),\n    handleSubmit: handleSubmit,\n    watch: watch,\n    reset: reset,\n    clearError: clearError,\n    setError: setError,\n    setValue: setValue,\n    triggerValidation: triggerValidation,\n    getValues: getValues,\n    errors: validationFields ? pickErrors(errorsRef.current, validationFields) : errorsRef.current,\n    formState: Object.assign({\n      dirty: isDirtyRef.current,\n      isSubmitted: isSubmittedRef.current,\n      submitCount: submitCountRef.current,\n      touched: _toConsumableArray(touchedFieldsRef.current),\n      isSubmitting: isSubmittingRef.current\n    }, isOnSubmit ? {\n      isValid: isEmptyObject(errorsRef.current)\n    } : {\n      isValid: validationSchema ? isSchemaValidateTriggeredRef.current && isEmptyObject(schemaErrorsRef.current) : fieldsWithValidationRef.current.size ? !isEmptyObject(fieldsRef.current) && validFieldsRef.current.size >= fieldsWithValidationRef.current.size : !isEmptyObject(fieldsRef.current)\n    })\n  };\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(props) {\n  var children = props.children,\n      rest = __rest(props, [\"children\"]);\n\n  var errors = rest.errors,\n      formState = rest.formState;\n  return useMemo(function () {\n    return createElement(FormGlobalContext.Provider, {\n      value: rest\n    }, children);\n  }, [errors, formState]);\n}\n\nexport default useForm;\nexport { FormContext, useFormContext };","map":null,"metadata":{},"sourceType":"module"}